[include heads.cfg]

########################################
# DUAL-CARRIAGES
########################################

[respond]

#[probe]
# --------------
# value larger / more positive will move the nozzle closer to the print surface.
# value smaller / more negative will move the nozzle further from the print surface.
# --------------
# z_offset: -0.84
#z_offset: -0.810 ; -0.85 ; -0.750 ; -0.870 ; -0.830 ; -0.770 ; -0.750 ; 0.77

[gcode_macro DC_VARS]
# Offset coordinates for dual_carriage

# X1 - X0 = x_offset
# variable_offset_x: 0
variable_offset_x: 0.2899 ; PERFECT!
# variable_offset_x: 0.2899 ; 0.2907 ; 0.2957 ; 0.3058 ; 0.3161 ; 0.3058 ; 0.2957 ; 0.3160 ; 0.3043 ; 0.3279 ; 0.2383

# Y1 - Y0 = y_offset
# variable_offset_y: 0
variable_offset_y: 0.3316 ; PERFECT!
# variable_offset_y: 0.3316 ; 0.3366 ; 0.3466 ; 0.3466 ; 0.3568 ; 0.3568 ; 0.3550 ; 0.3484 ; 0.3522

# variable_offset_z: -0.49
variable_offset_z: -0.495
# Autopark parameters
## default autopark: 0:inactive - 1:active
variable_autopark: 1
variable_z_hop: 0
variable_movespeed: 300
variable_feedrate: 18000
# HeatBed size
variable_bed_x_min: 0
variable_bed_x_max: 415 # TODO: figure out why this value
# Print cooling fans names
variable_fan0: 'fanX1'
variable_fan1: 'fanX2'
# Extruders temp
variable_offset_temp: 0
variable_scrubs: 5
variable_prep_spd_xy: 3000
variable_purge_length: 7 # TODO: pass in via param
variable_purge_spd: 150
variable_purge_ret: 2
variable_ooze_dwell: 1
variable_purge_temp_min: 235 # TODO: pass in via param

gcode:

## DUAL-CARRIAGES : FULL_CONTROL - AUTO-PARK

[homing_override]
axes: xyz
gcode:
    # either none or all
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set has_z = ('Z' in params or 'z' in params) %}
    {% set has_x = ('X' in params or 'x' in params) %}
    {% set has_y = ('Y' in params or 'y' in params) %}
    {% set has_all = (has_z and has_x and has_y) %}
    {% set has_none = (not has_z and not has_x and not has_y) %}
    {% set no_xy = (not has_x and not has_y) %}
    {% set only_z = (no_xy and has_z) %}
    {% set home_all = (has_none or has_all) %}
    {% set X_T0_MIN = printer.configfile.config.stepper_x.position_min|float %}
    {% set X_T1_MAX = printer.configfile.config.dual_carriage.position_max|float %}

    # Always drop to avoid hitting in XY.
    UNSAFE_LOWER_BED

    {% if home_all or has_y %}
        # home Y

        # having both T0 in X_MIN and T1 in X_MAX helps with Y HOME
        # we will home again if X is requested
        G28 X0
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_DUAL_CARRIAGE CARRIAGE=1
        _PARK_TOOL
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        _PARK_TOOL

        G90
        # move T0 over to the MIN (left)
        G1 X{X_T0_MIN} F{dcvars.feedrate}
        
        # now actually home Y
        IDEX_HOME_Y
    {% endif %}

    {% if home_all or has_x %}
        # home X (possibly for a second time)
        IDEX_HOME_X
    {% endif %}

    {% if home_all or has_z %}
        # home Z
        CENTER
        G28 Z
        G91
        G1 Z3 F1200
        G90
    {% endif %}

[gcode_macro IDEX_HOME_Y]
gcode:
    # Home
    G28 Y0
    # Move away
    G1 Y220 F2400

[gcode_macro IDEX_HOME_X]
gcode:
    G28 X0
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    G1 X150 F6000
    T0

[gcode_macro _T0_PURGE_LINE]
gcode:
    T0
    G90
    G0 X124 Y1 F6000

    G0 Z0.4
    G91
    G1 X-120 E25 F1200
    G1 Y2
    G1 X120 E25 F1200
    G1 E-1
    G92 E0
    G90

[gcode_macro _T1_PURGE_LINE]
gcode:
    T1
    G90
    G0 X126 Y1 F6000

    G0 Z0.4
    G91
    G1 X120 E25 F1200
    G1 Y2
    G1 X-120 E25 F1200
    G1 E-1
    G92 E0
    G90

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 10mm without homing
gcode:
  G90
  {% set z_is_homed = 'Z' in printer.toolhead.homed_axes or 'z' in printer.toolhead.homed_axes %}
  {% if not z_is_homed %}
    SET_KINEMATIC_POSITION Z=0
  {% endif %}
  G0 Z10 F1200

[gcode_macro T0]
description: Activate T0 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set do_scrub = params.SCRUB|default(1)|int %}
    {% set autopark = params.AUTO_PARK|default(dcvars.autopark | int)|int %}
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.active_carriage == "CARRIAGE_1" %}
            M400
            {% if autopark == 1 %}
                # z-hop
                {% if dcvars.z_hop|float > 0.0 %}
                    {% set max_z = printer.toolhead.axis_maximum.z|float %}
                    {% set cur_z = printer.toolhead.position.z|float %}
                    {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
                    G91
                    G1 Z{z_safe}
                    G90
                {% endif %}
                # park tool
                SAVE_GCODE_STATE NAME=toolhead_state
                _PARK_TOOL

            {% endif %}
            # toggle carriage
            ACTIVATE_EXTRUDER EXTRUDER=extruder
            SET_DUAL_CARRIAGE CARRIAGE=0
            # X
            # Fitted shaper 'mzv' frequency = 30.0 Hz (vibrations = 1.5%, smoothing ~= 0.226)
            # To avoid too much smoothing with 'mzv', suggested max_accel <= 2700 mm/sec^2
            # Y
            # Fitted shaper 'mzv' frequency = 38.0 Hz (vibrations = 2.2%, smoothing ~= 0.141)
            # To avoid too much smoothing with 'mzv', suggested max_accel <= 4300 mm/sec^2

            SET_INPUT_SHAPER SHAPER_FREQ_X=30.0 SHAPER_FREQ_Y=38.0 SHAPER_TYPE_X=MZV SHAPER_TYPE_Y=MZV

            {% if do_scrub == 1 %}
                _NOZZLE_SCRUB
            {% endif %}

            {% if autopark == 1 %}
                RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={dcvars.movespeed}
            {% endif %}

            # offsets
            SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1

            # print fan speed
            _SET_PRINT_FANS_SPEED
            # restore z
            {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                G91
                G1 Z-{z_safe}
                G90
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro T1]
description: Activate T1 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set do_scrub = params.SCRUB|default(1)|int %}
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
            M400
            {% if dcvars.autopark == 1 %}
                # z-hop
                {% if dcvars.z_hop|float > 0.0 %}
                    {% set max_z = printer.toolhead.axis_maximum.z|float %}
                    {% set cur_z = printer.toolhead.position.z|float %}
                    {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
                    G91
                    G1 Z{z_safe}
                    G90
                {% endif %}
                # park tool
                SAVE_GCODE_STATE NAME=toolhead_state
                _PARK_TOOL
            {% endif %}
            # toggle carriage
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            SET_DUAL_CARRIAGE CARRIAGE=1

            # X
            # Fitted shaper 'mzv' frequency = 29.0 Hz (vibrations = 1.5%, smoothing ~= 0.242)
            # To avoid too much smoothing with 'mzv', suggested max_accel <= 2500 mm/sec^2
            # Y
            # Fitted shaper 'mzv' frequency = 38.8 Hz (vibrations = 1.4%, smoothing ~= 0.135)
            # To avoid too much smoothing with 'mzv', suggested max_accel <= 4400 mm/sec^2

            SET_INPUT_SHAPER SHAPER_FREQ_X=29.0 SHAPER_FREQ_Y=38.8 SHAPER_TYPE_X=MZV SHAPER_TYPE_Y=MZV

            {% if do_scrub == 1 %}
                _NOZZLE_SCRUB
            {% endif %}

            {% if dcvars.autopark == 1 %}
                RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={dcvars.movespeed}
            {% endif %}

            # offsets
            SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={dcvars.offset_z} MOVE=1

            # print fan speed
            _SET_PRINT_FANS_SPEED
            # restore z
            {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
                G91
                G1 Z-{z_safe}
                G90
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro CENTER]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    # get center X
    {% set X_T0_MIN = printer.configfile.config.stepper_x.position_min|float %}
    {% set X_T1_MAX = printer.configfile.config.dual_carriage.position_max|float %}
    {% set X_CENTER = (X_T0_MIN + X_T1_MAX)/2  %}
    {% set Y_MIN = printer.configfile.config.stepper_y.position_min|float %}
    {% set Y_MAX = printer.configfile.config.stepper_y.position_max|float %}
    {% set Y_CENTER = (Y_MIN + Y_MAX)/2  %}
    G90
    G0 X{X_CENTER} Y{Y_CENTER} F{dcvars.feedrate}

[gcode_macro _PARK_TOOL]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if printer.dual_carriage is defined %}
        SAVE_GCODE_STATE NAME=park_tool
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        G90
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set XPOS = printer.configfile.config.stepper_x.position_endstop|float + 0.2 %}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.stepper_x.position_endstop} F{dcvars.feedrate}
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            {% set XPOS = printer.configfile.config.dual_carriage.position_max|float - 0.2 %}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.dual_carriage.position_endstop} F{dcvars.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}

        RESTORE_GCODE_STATE NAME=park_tool
    {% endif %}

[gcode_macro _NOZZLE_SCRUB]
gcode:
    #TODO: use params here
    NOZZLE_SCRUB

[gcode_macro NOZZLE_SCRUB]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    # TODO: setup params for both t0 and t1
    {% set purge_length = params.purge_length | default(dcvars.purge_length) | int %}
    {% set purge_temp_min = params.purge_temp_min | default(dcvars.purge_temp_min) | int %}
    {% if printer.dual_carriage is defined and printer.toolhead.extruder in ['extruder', 'extruder1'] %}
        G90 ; Absolute Positioning
        {% set MIN = 1 %}
        {% set MAX = 20.0 %}
        {% set T0_MIN = printer.configfile.config.stepper_x.position_min|float %} ; -50
        {% set T1_MIN = printer.configfile.config.dual_carriage.position_max|float %} ; 300
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set TEMP = printer.extruder.temperature %}
            {% set XMAX = T0_MIN %}
            {% set XPOS = T0_MIN + (MIN|float) %}
            {% set XPOS1 = T0_MIN + (MAX|float) %}
        {% else %}
            {% set TEMP = printer.extruder1.temperature %}
            {% set XMAX = T1_MIN %}
            {% set XPOS = T1_MIN - (MIN|float) %}
            {% set XPOS1 = T1_MIN - (MAX|float) %}
        {% endif %}

        {% set should_extrude = TEMP >= purge_temp_min and purge_length > 0 %}
        G90 ; Absolute Positioning
        G1 X{XMAX} F{dcvars.prep_spd_xy}
        {% if should_extrude %}
            M83      ; relative mode
            G1 E{purge_length} F{dcvars.purge_spd}
            G1 E-{dcvars.purge_ret} F{dcvars.purge_spd * 5}
        {% endif %}

        G90 ; Absolute Positioning
        G1 X{XPOS} F{dcvars.prep_spd_xy}
        {% if should_extrude %}
            G4 P{dcvars.ooze_dwell * 1000} ; pause
            G92 E0   ; reset extruder
        {% endif %}

        G90 ; Absolute Positioning
        G1 X{XPOS1} F{dcvars.prep_spd_xy}
        {% for i in range(dcvars.scrubs) %}
            G1 X{XPOS} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
        {% endfor %}
        G1 X{XPOS} F{dcvars.prep_spd_xy}
        G90 ; Absolute Positioning
    {% endif %}

## DUAL-CARRIAGES : MODES ACTIVATION

[gcode_macro M605]
description: Set the dual-carriages mode
gcode:
    {% set mode = params.S|default(1)|int %}
    {% set offset_temp = params.R|default(0)|float %}
    {% if printer.dual_carriage is defined %}
        {% if (mode) == 0 %}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=autopark VALUE=0
            MODE_FULL_CONTROL
        {% elif (mode) == 1 %}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=autopark VALUE=1
            MODE_FULL_CONTROL
        {% elif (mode) == 2 and (params.X) is defined %}
            MODE_DUPLICATION X={params.X} R={offset_temp}
        {% elif (mode) == 2 %}
            MODE_DUPLICATION R={offset_temp}
        {% elif (mode) == 3 %}
            MODE_MIRRORED R={offset_temp}
        {% endif %}
        G1 F3000
    {% endif %}
    
## DUAL-CARRIAGES : PRINT FANS MANAGEMENT

[gcode_macro M106]
rename_existing: M106.1
description: Override "M106" to allow multiple extruders.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set raw_speed = params.S|default(0)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
    {% if (params.P) is defined %}
        {% set P_fan = dcvars.fan0 if (params.P)|int == 0 else dcvars.fan1 %}
        SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
    {% elif printer.dual_carriage is defined %}
        _SET_PRINT_FANS_SPEED SPEED={fan_speed}
    {% endif %}
    
[gcode_macro M107]
rename_existing: M107.1
description: Override "M107" to allow multiple extruders.
gcode:
    M106 S0
    
[gcode_macro _SET_PRINT_FANS_SPEED]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}
    {% else %}
        # read print fan speed from active extruder
        {% set fan0_speed = printer["fan_generic " + dcvars.fan0].speed|float %}
        {% set fan1_speed = printer["fan_generic " + dcvars.fan1].speed|float %}
        {% set fan_speed = [fan0_speed, fan1_speed]|max %}
    {% endif %}
    {% if printer.dual_carriage.active_carriage == "BOTH" %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% elif printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% elif printer.dual_carriage.active_carriage == "CARRIAGE_1" %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% endif %}

## DUAL-CARRIAGES : HEATERS MANAGEMENT
    
[gcode_macro M104]
rename_existing: M104.1
description: Override "M104" to allow multiple extruders to be synchronized.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(0)|int %}
    {% if printer.dual_carriage.active_carriage|default() == "BOTH" %}
        {% if tool == 0 %}
            M104.1 T0 S{temp}
            M104.1 T1 S{temp + dcvars.offset_temp|float}
        {% endif %}
    {% else %}
        M104.1 T{tool} S{temp}
    {% endif %}
    
[gcode_macro M109]
rename_existing: M109.1
description: Override "M109" to allow multiple extruders to be synchronized.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(0)|int %}
    {% if printer.dual_carriage.active_carriage|default() == "BOTH" %}
        {% if tool == 0 %}  
            M104.1 T1 S{temp + dcvars.offset_temp|float}
            M109.1 T0 S{temp}
            M109.1 T1 S{temp + dcvars.offset_temp|float}
        {% endif %}
    {% else %}
        M109.1 T{tool} S{temp}
    {% endif %}

[gcode_macro _SYNC_EXTRUDERS_TEMP]
gcode:
    {% set temp = printer["extruder"].target|float %}
    M109 S{temp}

[gcode_macro CV_NOZZLE_PREP]
gcode:
    # TODO
    # CG28
    IDEX_HOME_Y
    IDEX_HOME_X
    G28 Z
    G1 Z141 F1500
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=2000
    SET_VELOCITY_LIMIT ACCEL=2000
    SET_VELOCITY_LIMIT VELOCITY=150
    SET_LED LED="head1_rgb" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1
    SET_LED LED="head0_rgb" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1